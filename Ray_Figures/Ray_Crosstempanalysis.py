# -*- coding: utf-8 -*-
"""
Created on Fri Aug 24 08:34:36 2018

@author: Moshe Dolejsi

This code makes the box plots and PSD across temperatures using the LER data generated by Ray1D
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
#%% First section does PSD. Second Section does Box/Table
#%% import data
LER150 = pd.read_csv("150LER.csv",header=None)
LER210 = pd.read_csv("210LER.csv",header=None)
LER240 = pd.read_csv("240LER.csv",header=None)
LERMid = pd.read_csv("LER-Mid.csv",header=None)
LEREdge = pd.read_csv("LER-Edge.csv",header=None)
# and LPR
LWR150 = pd.read_csv("150LWR.csv",header=None)
LWR210 = pd.read_csv("210LWR.csv",header=None)
LWR240 = pd.read_csv("240LWR.csv",header=None)
LWRMid = pd.read_csv("LWR-Mid.csv",header=None)
LWREdge = pd.read_csv("LWR-Edge.csv",header=None)
# and lpr
LPR150 = pd.read_csv("150LPR.csv",header=None)
LPR210 = pd.read_csv("210LPR.csv",header=None)
LPR240 = pd.read_csv("240LPR.csv",header=None)
LPRMid = pd.read_csv("LPR-Mid.csv",header=None)
LPREdge = pd.read_csv("LPR-Edge.csv",header=None)
#%%
PSDFreq = LER150.values[0,:]
PSDPlot = 2 # 2 = fits, 1 = without fits
RollAv = int(5)
ConMode = 'same'
# OG Colors, Changed for author preference to below
#LPRColor = "#FFD966"
#LERColor = "#203864"
#LWRColor = "#C5E0B4"

LPRColor = "#3c8434"
LERColor = "#c00000"
LWRColor = "#95a7f5"
CColor = "#646464"

#%% LER
#ScanNo = int(6) #didn't end up using for paper. was investigating extraneous effect of edge v center

LER150Mean = np.nanmean(LER150.values[1:,:],axis=0)
LER150Roll = np.convolve(LER150Mean, np.ones((RollAv,))/RollAv, mode=ConMode)
LER150Std = np.nanstd(LER150.values[1:,:],axis=0)
LER150Elow = LER150Mean*10**(LER150Std/(LER150Mean*np.log(10)))
LER150Ehigh = LER150Mean/10**(LER150Std/(LER150Mean*np.log(10)))

LER210Mean = np.nanmean(LER210.values[1:,:],axis=0)
LER210Roll = np.convolve(LER210Mean, np.ones((RollAv,))/RollAv, mode=ConMode)
LER210Std = np.nanstd(LER210.values[1:,:],axis=0)
LER210Elow = LER210Mean*10**(LER210Std/(LER210Mean*np.log(10)))
LER210Ehigh = LER210Mean/10**(LER210Std/(LER210Mean*np.log(10)))

LER240Mean = np.nanmean(LER240.values[1:,:],axis=0)
LER240Roll = np.convolve(LER240Mean, np.ones((RollAv,))/RollAv, mode=ConMode)
LER240Std = np.nanstd(LER240.values[1:,:],axis=0)
LER240Elow = LER240Mean*10**(LER240Std/(LER240Mean*np.log(10)))
LER240Ehigh = LER240Mean/10**(LER240Std/(LER240Mean*np.log(10)))
##LERMidMean = np.nanmean(LERMid.values[1,:],axis=0)
#LERMidMean = LEREdge.values[ScanNo,:]
#LERMidRoll = np.convolve(LERMidMean, np.ones((RollAv,))/RollAv, mode=ConMode)
#LERMidStd = np.nanstd(LERMid.values[1:,:],axis=0)
#LERMidElow = ((LERMidMean) - LERMidStd/(LERMidMean*np.log(10)))
#LERMidEhigh = ((LERMidMean) + LERMidStd/(LERMidMean*np.log(10)))
#
##LEREdgeMean = np.nanmean(LEREdge.values[1,:],axis=0)
#LEREdgeMean = LEREdge.values[ScanNo,:]
#LEREdgeRoll = np.convolve(LEREdgeMean, np.ones((RollAv,))/RollAv, mode=ConMode)
#LEREdgeStd = np.nanstd(LEREdge.values[1:,:],axis=0)
#LEREdgeElow = ((LEREdgeMean) - LEREdgeStd/(LEREdgeMean*np.log(10)))
#LEREdgeEhigh = ((LEREdgeMean) + LEREdgeStd/(LEREdgeMean*np.log(10)))

#% LWR
LWR150Mean = np.nanmean(LWR150.values[1:,:],axis=0)
LWR150Roll = np.convolve(LWR150Mean, np.ones((RollAv,))/RollAv, mode=ConMode)
LWR150Std = np.nanstd(LWR150.values[1:,:],axis=0)
LWR150Elow = LWR150Mean*10**(LWR150Std/(LWR150Mean*np.log(10)))
LWR150Ehigh = LWR150Mean/10**(LWR150Std/(LWR150Mean*np.log(10)))

LWR210Mean = np.nanmean(LWR210.values[1:,:],axis=0)
LWR210Roll = np.convolve(LWR210Mean, np.ones((RollAv,))/RollAv, mode=ConMode)
LWR210Std = np.nanstd(LWR210.values[1:,:],axis=0)
LWR210Elow = LWR210Mean*10**(LWR210Std/(LWR210Mean*np.log(10)))
LWR210Ehigh = LWR210Mean/10**(LWR210Std/(LWR210Mean*np.log(10)))

LWR240Mean = np.nanmean(LWR240.values[1:,:],axis=0)
LWR240Roll = np.convolve(LWR240Mean, np.ones((RollAv,))/RollAv, mode=ConMode)
LWR240Std = np.nanstd(LWR240.values[1:,:],axis=0)
LWR240Elow = LWR240Mean*10**(LWR240Std/(LWR240Mean*np.log(10)))
LWR240Ehigh = LWR240Mean/10**(LWR240Std/(LWR240Mean*np.log(10)))

##LWRMidMean = np.nanmean(LWRMid.values[1,:],axis=0)
#LWRMidMean = LWREdge.values[ScanNo,:]
#LWRMidRoll = np.convolve(LWRMidMean, np.ones((RollAv,))/RollAv, mode=ConMode)
#LWRMidStd = np.nanstd(LWRMid.values[1:,:],axis=0)
#LWRMidElow = ((LWRMidMean) - LWRMidStd/(LWRMidMean*np.log(10)))
#LWRMidEhigh = ((LWRMidMean) + LWRMidStd/(LWRMidMean*np.log(10)))
#
##LWREdgeMean = np.nanmean(LWREdge.values[1,:],axis=0)
#LWREdgeMean = LWREdge.values[ScanNo,:]
#LWREdgeRoll = np.convolve(LWREdgeMean, np.ones((RollAv,))/RollAv, mode=ConMode)
#LWREdgeStd = np.nanstd(LWREdge.values[1:,:],axis=0)
#LWREdgeElow = ((LWREdgeMean) - LWREdgeStd/(LWREdgeMean*np.log(10)))
#LWREdgeEhigh = ((LWREdgeMean) + LWREdgeStd/(LWREdgeMean*np.log(10)))

#% LPR
LPR150Mean = np.nanmean(LPR150.values[1:,:],axis=0)
LPR150Roll = np.convolve(LPR150Mean, np.ones((RollAv,))/RollAv, mode=ConMode)
LPR150Std = np.nanstd(LPR150.values[1:,:],axis=0)
LPR150Elow = LPR150Mean*10**(LPR150Std/(LPR150Mean*np.log(10)))
LPR150Ehigh = LPR150Mean/10**(LPR150Std/(LPR150Mean*np.log(10)))

LPR210Mean = np.nanmean(LPR210.values[1:,:],axis=0)
LPR210Roll = np.convolve(LPR210Mean, np.ones((RollAv,))/RollAv, mode=ConMode)
LPR210Std = np.nanstd(LPR210.values[1:,:],axis=0)
LPR210Elow = LPR210Mean*10**(LPR210Std/(LPR210Mean*np.log(10)))
LPR210Ehigh = LPR210Mean/10**(LPR210Std/(LPR210Mean*np.log(10)))

LPR240Mean = np.nanmean(LPR240.values[1:,:],axis=0)
LPR240Roll = np.convolve(LPR240Mean, np.ones((RollAv,))/RollAv, mode=ConMode)
LPR240Std = np.nanstd(LPR240.values[1:,:],axis=0)
LPR240Elow = LPR240Mean*10**(LPR240Std/(LPR240Mean*np.log(10)))
LPR240Ehigh = LPR240Mean/10**(LPR240Std/(LPR240Mean*np.log(10)))

##LPRMidMean = np.nanmean(LPRMid.values[1:,:],axis=0)
#LPRMidMean = LPRMid.values[ScanNo,:]
#LPRMidRoll = np.convolve(LPRMidMean, np.ones((RollAv,))/RollAv, mode=ConMode)
#LPRMidStd = np.nanstd(LPRMid.values[1:,:],axis=0)
#LPRMidElow = ((LPRMidMean) - LPRMidStd/(LPRMidMean*np.log(10)))
#LPRMidEhigh = ((LPRMidMean) + LPRMidStd/(LPRMidMean*np.log(10)))
#
##LPREdgeMean = np.nanmean(LPREdge.values[1:,:],axis=0)
#LPREdgeMean = LPREdge.values[ScanNo,:]
#LPREdgeRoll = np.convolve(LPREdgeMean, np.ones((RollAv,))/RollAv, mode=ConMode)
#LPREdgeStd = np.nanstd(LPREdge.values[1:,:],axis=0)
#LPREdgeElow = ((LPREdgeMean) - LPREdgeStd/(LPREdgeMean*np.log(10)))
#LPREdgeEhigh = ((LPREdgeMean) + LPREdgeStd/(LPREdgeMean*np.log(10)))

#% One way to plot
if PSDPlot == 1:
    PSDFigSTD, PSDAxSTD = plt.subplots(ncols=3, nrows=3, sharex=True, sharey=True, figsize=(9,9))
    PSDAxSTD[0,0].loglog()
    PSDAxSTD[0,0].fill_between(PSDFreq,LER150Elow, LER150Ehigh, color=LERColor,alpha = 0.3)
    PSDAxSTD[0,0].plot(PSDFreq[3:-3],LER150Roll[3:-3],color='black')
    PSDAxSTD[1,0].loglog()
    PSDAxSTD[1,0].fill_between(PSDFreq,LER210Elow, LER210Ehigh, color=LERColor,alpha = 0.3)
    PSDAxSTD[1,0].plot(PSDFreq[3:-3],LER210Roll[3:-3],color='black')
    PSDAxSTD[2,0].loglog()
    PSDAxSTD[2,0].fill_between(PSDFreq,LER240Elow, LER240Ehigh, color=LERColor,alpha = 0.3)
    PSDAxSTD[2,0].plot(PSDFreq[3:-3],LER240Roll[3:-3],color='black')
    PSDAxSTD[0,0].set_title('LER')
    
    PSDAxSTD[0,1].loglog()
    PSDAxSTD[0,1].fill_between(PSDFreq,LPR150Elow, LPR150Ehigh, color=LPRColor,alpha = 0.3)
    PSDAxSTD[0,1].plot(PSDFreq[3:-3],LPR150Roll[3:-3],color='black')
    PSDAxSTD[0,1].loglog()
    PSDAxSTD[1,1].fill_between(PSDFreq,LPR210Elow, LPR210Ehigh, color=LPRColor,alpha = 0.3)
    PSDAxSTD[1,1].plot(PSDFreq[3:-3],LPR210Roll[3:-3],color='black')
    PSDAxSTD[1,1].loglog()
    PSDAxSTD[2,1].fill_between(PSDFreq,LPR240Elow, LPR240Ehigh, color=LPRColor,alpha = 0.3)
    PSDAxSTD[2,1].plot(PSDFreq[3:-3],LPR240Roll[3:-3],color='black')
    PSDAxSTD[0,1].set_title('LPR')
    
    PSDAxSTD[0,2].loglog()
    PSDAxSTD[0,2].fill_between(PSDFreq,LWR150Elow, LWR150Ehigh, color=LWRColor,alpha = 0.3)
    PSDAxSTD[0,2].plot(PSDFreq[3:-3],LWR150Roll[3:-3],color='black')
    PSDAxSTD[1,2].loglog()
    PSDAxSTD[1,2].fill_between(PSDFreq,LWR210Elow, LWR210Ehigh, color=LWRColor,alpha = 0.3)
    PSDAxSTD[1,2].plot(PSDFreq[3:-3],LWR210Roll[3:-3],color='black')
    PSDAxSTD[2,2].loglog()
    PSDAxSTD[2,2].fill_between(PSDFreq,LWR240Elow, LWR240Ehigh, color=LWRColor,alpha = 0.3)
    PSDAxSTD[2,2].plot(PSDFreq[3:-3],LWR240Roll[3:-3],color='black')
    PSDAxSTD[0,2].set_title('LWR')
    
    PSDFigSTD.savefig("PSDasTemp.png", dpi=600)


#% PSD with fits?

#%
if PSDPlot == 2:
    PSDFigFit, PSDAxFit = plt.subplots(ncols=3, nrows=3, sharex=True, sharey=True, figsize=(9,9))
    
    SetAlph = 0.5
    Offset = 0
    crit150 = 0
    crit210 = 0
    Edge150L = int(0)
    Edge150R = int(0)
    Edge210L = int(0)
    Edge210R = int(0)
    
    for CutOff in np.arange(10,PSDFreq.size-110):
        FitL150 = np.polyfit(np.log10(PSDFreq[:CutOff+1]),np.log10(LER150Mean[:CutOff+1]),1)
        FitR150 = np.polyfit(np.log10(PSDFreq[CutOff:]),np.log10(LER150Mean[CutOff:]),1)
        if abs(FitL150[0]-FitR150[0]) > crit150:
            crit150 = abs(FitL150[0]-FitR150[0])
            F150 = np.copy(CutOff)
            
        FitL210 = np.polyfit(np.log10(PSDFreq[:CutOff+1]),np.log10(LER210Mean[:CutOff+1]),1)
        FitR210 = np.polyfit(np.log10(PSDFreq[CutOff:]),np.log10(LER210Mean[CutOff:]),1)  
        if abs(FitL210[0]-FitR210[0]) > crit210:
            crit210 = abs(FitL210[0]-FitR210[0])
            F210 = np.copy(CutOff)
#%  
           
#    F150 = 24
#    F210 = 63
    #%
    TableFit = pd.DataFrame(index=['150L','150R','210L','210R','240'],columns=['LER','LWR','LPR'])
    #% LER150
    PSDAxFit[0,0].loglog()
    PSDAxFit[0,0].fill_between(PSDFreq,LER150Ehigh, LER150Elow, color=LERColor,alpha = SetAlph)
    FitL = np.polyfit(np.log10(PSDFreq[:F150+1]),np.log10(LER150Mean[:F150+1]),1)
    FitR = np.polyfit(np.log10(PSDFreq[F150:]),np.log10(LER150Mean[F150:]),1)
    PSDAxFit[0,0].plot(PSDFreq[:F150+Edge150R],10**(np.polyval(FitL,np.log10(PSDFreq[:F150+Edge150R]))+Offset),'k:')
    PSDAxFit[0,0].plot(PSDFreq[F150-Edge150L:],10**(np.polyval(FitR,np.log10(PSDFreq[F150-Edge150L:]))+Offset),'k:')
    PSDAxFit[0,0].set_ylabel(r'$150 \degree C$')
    PSDAxFit[0,0].axvline(x=PSDFreq[F150],color='gray')
    TableFit.iloc[0,0]=FitL[0]
    TableFit.iloc[1,0]=FitR[0]
    
    PSDAxFit[1,0].loglog()
    PSDAxFit[1,0].fill_between(PSDFreq,LER210Elow, LER210Ehigh, color=LERColor,alpha = SetAlph)
    FitL = np.polyfit(np.log10(PSDFreq[:F210+1]),np.log10(LER210Mean[:F210+1]),1)
    FitR = np.polyfit(np.log10(PSDFreq[F210:]),np.log10(LER210Mean[F210:]),1)
    PSDAxFit[1,0].plot(PSDFreq[:F210+Edge210R],10**(np.polyval(FitL,np.log10(PSDFreq[:F210+Edge210R]))+Offset),'k:')
    PSDAxFit[1,0].plot(PSDFreq[F210-Edge210L:],10**(np.polyval(FitR,np.log10(PSDFreq[F210-Edge210L:]))+Offset),'k:')
    PSDAxFit[1,0].set_ylabel(r'$210 \degree C$')
    PSDAxFit[1,0].axvline(x=PSDFreq[F210],color='gray')
    TableFit.iloc[2,0]=FitL[0]
    TableFit.iloc[3,0]=FitR[0]
    
    PSDAxFit[2,0].loglog()
    PSDAxFit[2,0].fill_between(PSDFreq,LER240Elow, LER240Ehigh, color=LERColor,alpha = SetAlph)
    FitL = np.polyfit(np.log10(PSDFreq),np.log10(LER240Mean),1)
    PSDAxFit[2,0].plot(PSDFreq,10**(np.polyval(FitL,np.log10(PSDFreq))+Offset),'k:')
    PSDAxFit[2,0].set_ylabel(r'$240 \degree C$')
    TableFit.iloc[4,0]=FitL[0]
    
    
    PSDAxFit[0,0].set_title('LER')
    
    #% LPR 150
    
    PSDAxFit[0,1].loglog()
    PSDAxFit[0,1].fill_between(PSDFreq,LPR150Elow, LPR150Ehigh, color=LPRColor,alpha = SetAlph)
    FitL = np.polyfit(np.log10(PSDFreq[:F150+1]),np.log10(LPR150Mean[:F150+1]),1)
    FitR = np.polyfit(np.log10(PSDFreq[F150:]),np.log10(LPR150Mean[F150:]),1)
    PSDAxFit[0,1].plot(PSDFreq[:F150+Edge150R],10**(np.polyval(FitL,np.log10(PSDFreq[:F150+Edge150R]))+Offset),'k:')
    PSDAxFit[0,1].plot(PSDFreq[F150-Edge150L:],10**(np.polyval(FitR,np.log10(PSDFreq[F150-Edge150L:]))+Offset),'k:')
    PSDAxFit[0,1].axvline(x=PSDFreq[F150],color='gray')
    TableFit.iloc[0,1]=FitL[0]
    TableFit.iloc[1,1]=FitR[0]
    
    PSDAxFit[0,1].loglog()
    PSDAxFit[1,1].fill_between(PSDFreq,LPR210Elow, LPR210Ehigh, color=LPRColor,alpha = SetAlph)
    FitL = np.polyfit(np.log10(PSDFreq[:F210+1]),np.log10(LPR210Mean[:F210+1]),1)
    FitR = np.polyfit(np.log10(PSDFreq[F210:]),np.log10(LPR210Mean[F210:]),1)
    PSDAxFit[1,1].plot(PSDFreq[:F210+Edge210R],10**(np.polyval(FitL,np.log10(PSDFreq[:F210+Edge210R]))+Offset),'k:')
    PSDAxFit[1,1].plot(PSDFreq[F210-Edge210L:],10**(np.polyval(FitR,np.log10(PSDFreq[F210-Edge210L:]))+Offset),'k:')
    PSDAxFit[1,1].axvline(x=PSDFreq[F210],color='gray')
    TableFit.iloc[2,1]=FitL[0]
    TableFit.iloc[3,1]=FitR[0]
    
    PSDAxFit[1,1].loglog()
    PSDAxFit[2,1].fill_between(PSDFreq,LPR240Elow, LPR240Ehigh, color=LPRColor,alpha = SetAlph)
    FitL = np.polyfit(np.log10(PSDFreq),np.log10(LPR240Mean),1)
    PSDAxFit[2,1].plot(PSDFreq,10**(np.polyval(FitL,np.log10(PSDFreq))+Offset),'k:')
    TableFit.iloc[4,1]=FitL[0]

    
    PSDAxFit[0,1].set_title('LPR')
    
    #% LWR
    PSDAxFit[0,2].loglog()
    PSDAxFit[0,2].fill_between(PSDFreq,LWR150Elow, LWR150Ehigh, color=LWRColor,alpha = SetAlph)
    FitL = np.polyfit(np.log10(PSDFreq[:F150+1]),np.log10(LWR150Mean[:F150+1]),1)
    FitR = np.polyfit(np.log10(PSDFreq[F150:]),np.log10(LWR150Mean[F150:]),1)
    PSDAxFit[0,2].plot(PSDFreq[:F150+Edge150R],10**(np.polyval(FitL,np.log10(PSDFreq[:F150+Edge150R]))+Offset),'k:')
    PSDAxFit[0,2].plot(PSDFreq[F150-Edge150L:],10**(np.polyval(FitR,np.log10(PSDFreq[F150-Edge150L:]))+Offset),'k:')
    PSDAxFit[0,2].axvline(x=PSDFreq[F150],color='gray')
    TableFit.iloc[0,2]=FitL[0]
    TableFit.iloc[1,2]=FitR[0]
    
    PSDAxFit[1,2].loglog()
    PSDAxFit[1,2].fill_between(PSDFreq,LWR210Elow, LWR210Ehigh, color=LWRColor,alpha = SetAlph)
    FitL = np.polyfit(np.log10(PSDFreq[:F210+1]),np.log10(LWR210Mean[:F210+1]),1)
    FitR = np.polyfit(np.log10(PSDFreq[F210:]),np.log10(LWR210Mean[F210:]),1)
    PSDAxFit[1,2].plot(PSDFreq[:F210+Edge210R],10**(np.polyval(FitL,np.log10(PSDFreq[:F210+Edge210R]))+Offset),'k:')
    PSDAxFit[1,2].plot(PSDFreq[F210-Edge210L:],10**(np.polyval(FitR,np.log10(PSDFreq[F210-Edge210L:]))+Offset),'k:')
    PSDAxFit[1,2].axvline(x=PSDFreq[F210],color='gray')
    TableFit.iloc[2,2]=FitL[0]
    TableFit.iloc[3,2]=FitR[0]
    
    PSDAxFit[2,2].loglog()
    PSDAxFit[2,2].fill_between(PSDFreq,LWR240Elow, LWR240Ehigh, color=LWRColor,alpha = SetAlph)
    FitL = np.polyfit(np.log10(PSDFreq),np.log10(LWR240Mean),1)
    PSDAxFit[2,2].plot(PSDFreq,10**(np.polyval(FitL,np.log10(PSDFreq))+Offset),'k:')
    TableFit.iloc[4,2]=FitL[0]

    
    
    PSDAxFit[0,2].set_title('LWR')
    TableFit.to_csv('PSD slopes.csv')
    PSDFigFit.savefig("PSDvTempFITs.png", dpi=600)
    #%%

    #%% And do Edge/Mid Plot # Note not used in final paper as no discernible 
    #effect was found (some scan noise appeared as an effect but was eliminated later on)
    # now we have L Left C center and R right
#    
#    
#    
#    critEdge = 0
#    critMid = 0
#
#    
#    for CutOff in np.arange(10,PSDFreq.size-220):
#        FitLMid = np.polyfit(np.log10(PSDFreq[:CutOff+1]),np.log10(LERMidMean[:CutOff+1]),1)
#        FitCMid = np.polyfit(np.log10(PSDFreq[CutOff:]),np.log10(LERMidMean[CutOff:]),1)
#        if abs(FitLMid[0]-FitCMid[0]) > critMid:
#            critMid = abs(FitLMid[0]-FitCMid[0])
#            FMid1 = np.copy(CutOff)
#            
#        FitLEdge = np.polyfit(np.log10(PSDFreq[:CutOff+1]),np.log10(LEREdgeMean[:CutOff+1]),1)
#        FitCEdge = np.polyfit(np.log10(PSDFreq[CutOff:]),np.log10(LEREdgeMean[CutOff:]),1)
#        if abs(FitLEdge[0]-FitCEdge[0]) > critEdge:
#            critEdge = abs(FitLEdge[0]-FitCEdge[0])
#            FEdge1 = np.copy(CutOff)
#    
#
#    critMid = 0
#    for CutOff in np.arange(FMid1+4,PSDFreq.size-100):
#        FitLMid = np.polyfit(np.log10(PSDFreq[:CutOff+1]),np.log10(LERMidMean[:CutOff+1]),1)
#        FitCMid = np.polyfit(np.log10(PSDFreq[CutOff:]),np.log10(LERMidMean[CutOff:]),1)
#        if abs(FitLMid[0]-FitCMid[0]) > critMid:
#            critMid = abs(FitLMid[0]-FitCMid[0])
#            FMid2 = np.copy(CutOff)
#            
#            
#    critEdge = 0
#    for CutOff in np.arange(FEdge1+4,PSDFreq.size-100):
#        FitLEdge = np.polyfit(np.log10(PSDFreq[:CutOff+1]),np.log10(LEREdgeMean[:CutOff+1]),1)
#        FitCEdge = np.polyfit(np.log10(PSDFreq[CutOff:]),np.log10(LEREdgeMean[CutOff:]),1)
#        if abs(FitLEdge[0]-FitCEdge[0]) > critEdge:
#            critEdge = abs(FitLEdge[0]-FitCEdge[0])
#            FEdge2 = np.copy(CutOff)
#    #%% Now the plot
#    
#    PSDEMFigFit, PSDEMAxFit = plt.subplots(ncols=3, nrows=2, sharex=True, sharey=True, figsize=(9,9))
#    
#    SetAlph = 0.5
#    Offset = 0
#    
#    TableEMFit = pd.DataFrame(index=['MidL','MidC','MidR','EdgeL','EdgeC','EdgeR'],columns=['LER','LWR','LPR'])
#    #% MID at 210
#    PSDEMAxFit[0,0].loglog()
#    PSDEMAxFit[0,0].fill_between(PSDFreq,LERMidElow, LERMidEhigh, color=LERColor,alpha = SetAlph)
#    FitL = np.polyfit(np.log10(PSDFreq[:FMid1+1]),np.log10(LERMidMean[:FMid1+1]),1)
#    FitC = np.polyfit(np.log10(PSDFreq[FMid1:FMid2+1]),np.log10(LERMidMean[FMid1:FMid2+1]),1)
#    FitR = np.polyfit(np.log10(PSDFreq[FMid2:]),np.log10(LERMidMean[FMid2:]),1)
#    PSDEMAxFit[0,0].plot(PSDFreq[:FMid1+1],10**(np.polyval(FitL,np.log10(PSDFreq[:FMid1+1]))+Offset),'k:')
#    PSDEMAxFit[0,0].plot(PSDFreq[FMid1:FMid2+1],10**(np.polyval(FitC,np.log10(PSDFreq[FMid1:FMid2+1]))+Offset),'k:')
#    PSDEMAxFit[0,0].plot(PSDFreq[FMid2:],10**(np.polyval(FitR,np.log10(PSDFreq[FMid2:]))+Offset),'k:')
#    PSDEMAxFit[0,0].set_ylabel(r'$Mid 210 \degree C$')
#    PSDEMAxFit[0,0].axvline(x=PSDFreq[FMid1],color='gray')
#    PSDEMAxFit[0,0].axvline(x=PSDFreq[FMid2],color='gray')
#    TableEMFit.iloc[0,0]=FitL[0]
#    TableEMFit.iloc[1,0]=FitC[0]
#    TableEMFit.iloc[2,0]=FitR[0]
#    
#    PSDEMAxFit[1,0].loglog()
#    PSDEMAxFit[1,0].fill_between(PSDFreq,LEREdgeElow, LEREdgeEhigh, color=LERColor,alpha = SetAlph)
#    FitL = np.polyfit(np.log10(PSDFreq[:FEdge1+1]),np.log10(LEREdgeMean[:FEdge1+1]),1)
#    FitC = np.polyfit(np.log10(PSDFreq[FEdge1:FEdge2+1]),np.log10(LEREdgeMean[FEdge1:FEdge2+1]),1)
#    FitR = np.polyfit(np.log10(PSDFreq[FEdge2:]),np.log10(LEREdgeMean[FEdge2:]),1)
#    PSDEMAxFit[1,0].plot(PSDFreq[:FEdge1+1],10**(np.polyval(FitL,np.log10(PSDFreq[:FEdge1+1]))+Offset),'k:')
#    PSDEMAxFit[1,0].plot(PSDFreq[FEdge1:FEdge2+1],10**(np.polyval(FitC,np.log10(PSDFreq[FEdge1:FEdge2+1]))+Offset),'k:')
#    PSDEMAxFit[1,0].plot(PSDFreq[FEdge2:],10**(np.polyval(FitR,np.log10(PSDFreq[FEdge2:]))+Offset),'k:')
#    PSDEMAxFit[1,0].set_ylabel(r'$Edge 210 \degree C$')
#    PSDEMAxFit[1,0].axvline(x=PSDFreq[FEdge1],color='gray')
#    PSDEMAxFit[1,0].axvline(x=PSDFreq[FEdge2],color='gray')
#    TableEMFit.iloc[3,0]=FitL[0]
#    TableEMFit.iloc[4,0]=FitC[0]
#    TableEMFit.iloc[5,0]=FitR[0]
#
#    PSDEMAxFit[0,0].set_title('LER')
#    
#    #% LPR Mid
#    
#    PSDEMAxFit[0,1].loglog()
#    PSDEMAxFit[0,1].fill_between(PSDFreq,LPRMidElow, LPRMidEhigh, color=LPRColor,alpha = SetAlph)
#    FitL = np.polyfit(np.log10(PSDFreq[:FMid1+1]),np.log10(LPRMidMean[:FMid1+1]),1)
#    FitC = np.polyfit(np.log10(PSDFreq[FMid1:FMid2+1]),np.log10(LPRMidMean[FMid1:FMid2+1]),1)
#    FitR = np.polyfit(np.log10(PSDFreq[FMid2:]),np.log10(LPRMidMean[FMid2:]),1)
#    PSDEMAxFit[0,1].plot(PSDFreq[:FMid1+1],10**(np.polyval(FitL,np.log10(PSDFreq[:FMid1+1]))+Offset),'k:')
#    PSDEMAxFit[0,1].plot(PSDFreq[FMid1:FMid2+1],10**(np.polyval(FitC,np.log10(PSDFreq[FMid1:FMid2+1]))+Offset),'k:')
#    PSDEMAxFit[0,1].plot(PSDFreq[FMid2:],10**(np.polyval(FitR,np.log10(PSDFreq[FMid2:]))+Offset),'k:')
#    PSDEMAxFit[0,1].set_ylabel(r'$Mid 210 \degree C$')
#    PSDEMAxFit[0,1].axvline(x=PSDFreq[FMid1],color='gray')
#    PSDEMAxFit[0,1].axvline(x=PSDFreq[FMid2],color='gray')
#    TableEMFit.iloc[0,1]=FitL[0]
#    TableEMFit.iloc[1,1]=FitC[0]
#    TableEMFit.iloc[2,1]=FitR[0]
#    
#    PSDEMAxFit[1,1].loglog()
#    PSDEMAxFit[1,1].fill_between(PSDFreq,LPREdgeElow, LPREdgeEhigh, color=LPRColor,alpha = SetAlph)
#    FitL = np.polyfit(np.log10(PSDFreq[:FEdge1+1]),np.log10(LPREdgeMean[:FEdge1+1]),1)
#    FitC = np.polyfit(np.log10(PSDFreq[FEdge1:FEdge2+1]),np.log10(LPREdgeMean[FEdge1:FEdge2+1]),1)
#    FitR = np.polyfit(np.log10(PSDFreq[FEdge2:]),np.log10(LPREdgeMean[FEdge2:]),1)
#    PSDEMAxFit[1,1].plot(PSDFreq[:FEdge1+1],10**(np.polyval(FitL,np.log10(PSDFreq[:FEdge1+1]))+Offset),'k:')
#    PSDEMAxFit[1,1].plot(PSDFreq[FEdge1:FEdge2+1],10**(np.polyval(FitC,np.log10(PSDFreq[FEdge1:FEdge2+1]))+Offset),'k:')
#    PSDEMAxFit[1,1].plot(PSDFreq[FEdge2:],10**(np.polyval(FitR,np.log10(PSDFreq[FEdge2:]))+Offset),'k:')
#    PSDEMAxFit[1,1].set_ylabel(r'$Edge 210 \degree C$')
#    PSDEMAxFit[1,1].axvline(x=PSDFreq[FEdge1],color='gray')
#    PSDEMAxFit[1,1].axvline(x=PSDFreq[FEdge2],color='gray')
#    TableEMFit.iloc[3,1]=FitL[0]
#    TableEMFit.iloc[4,1]=FitC[0]
#    TableEMFit.iloc[5,1]=FitR[0]
#
#    
#    PSDEMAxFit[0,1].set_title('LPR')
#    
#    #% LWR
#    PSDEMAxFit[0,2].loglog()
#    PSDEMAxFit[0,2].fill_between(PSDFreq,LWRMidElow, LWRMidEhigh, color=LWRColor,alpha = SetAlph)
#    FitL = np.polyfit(np.log10(PSDFreq[:FMid1+1]),np.log10(LWRMidMean[:FMid1+1]),1)
#    FitC = np.polyfit(np.log10(PSDFreq[FMid1:FMid2+1]),np.log10(LWRMidMean[FMid1:FMid2+1]),1)
#    FitR = np.polyfit(np.log10(PSDFreq[FMid2:]),np.log10(LWRMidMean[FMid2:]),1)
#    PSDEMAxFit[0,2].plot(PSDFreq[:FMid1+1],10**(np.polyval(FitL,np.log10(PSDFreq[:FMid1+1]))+Offset),'k:')
#    PSDEMAxFit[0,2].plot(PSDFreq[FMid1:FMid2+1],10**(np.polyval(FitC,np.log10(PSDFreq[FMid1:FMid2+1]))+Offset),'k:')
#    PSDEMAxFit[0,2].plot(PSDFreq[FMid2:],10**(np.polyval(FitR,np.log10(PSDFreq[FMid2:]))+Offset),'k:')
#    PSDEMAxFit[0,2].set_ylabel(r'$Mid 210 \degree C$')
#    PSDEMAxFit[0,2].axvline(x=PSDFreq[FMid1],color='gray')
#    PSDEMAxFit[0,2].axvline(x=PSDFreq[FMid2],color='gray')
#    TableEMFit.iloc[0,2]=FitL[0]
#    TableEMFit.iloc[1,2]=FitC[0]
#    TableEMFit.iloc[2,2]=FitR[0]
#    
#    PSDEMAxFit[1,2].loglog()
#    PSDEMAxFit[1,2].fill_between(PSDFreq,LWREdgeElow, LWREdgeEhigh, color=LWRColor,alpha = SetAlph)
#    FitL = np.polyfit(np.log10(PSDFreq[:FEdge1+1]),np.log10(LWREdgeMean[:FEdge1+1]),1)
#    FitC = np.polyfit(np.log10(PSDFreq[FEdge1:FEdge2+1]),np.log10(LWREdgeMean[FEdge1:FEdge2+1]),1)
#    FitR = np.polyfit(np.log10(PSDFreq[FEdge2:]),np.log10(LWREdgeMean[FEdge2:]),1)
#    PSDEMAxFit[1,2].plot(PSDFreq[:FEdge1+1],10**(np.polyval(FitL,np.log10(PSDFreq[:FEdge1+1]))+Offset),'k:')
#    PSDEMAxFit[1,2].plot(PSDFreq[FEdge1:FEdge2+1],10**(np.polyval(FitC,np.log10(PSDFreq[FEdge1:FEdge2+1]))+Offset),'k:')
#    PSDEMAxFit[1,2].plot(PSDFreq[FEdge2:],10**(np.polyval(FitR,np.log10(PSDFreq[FEdge2:]))+Offset),'k:')
#    PSDEMAxFit[1,2].set_ylabel(r'$Edge 210 \degree C$')
#    PSDEMAxFit[1,2].axvline(x=PSDFreq[FEdge1],color='gray')
#    PSDEMAxFit[1,2].axvline(x=PSDFreq[FEdge2],color='gray')
#    TableEMFit.iloc[3,2]=FitL[0]
#    TableEMFit.iloc[4,2]=FitC[0]
#    TableEMFit.iloc[5,2]=FitR[0]
#    
#    PSDEMAxFit[0,2].set_title('LWR')
#    PSDEMFigFit.savefig("PSDvTempEMFIT-Scan6.png", dpi=600)
#    
#%%
LERSig = pd.read_csv("LERSigma.csv")
LPRSig = pd.read_csv("LPRSigma.csv")
LWRSig = pd.read_csv("LWRSigma.csv")
CKSig = pd.read_csv("CKSigma.csv")

#%% correct for the fact we exported VAR instead of STDEV by accident
# Note we drop 175 as the data was very noisy.
LER3Sig = 3*np.sqrt(LERSig.drop(['175'],axis = 1).values/3)
LPR3Sig = 3*np.sqrt(LPRSig.drop(['175'],axis = 1).values/3)
LWR3Sig = 3*np.sqrt(LWRSig.drop(['175'], axis = 1).values/3)
CK3Sig = 1 - (LWR3Sig/3)**2 / (2* (LER3Sig/3)**2)



#%%
BoxF, BoxAx = plt.subplots(nrows = 4, sharex=True,figsize =(6,12))

BoxAx[0].set_ylabel(r'$3\sigma_e (nm)$')
mask = np.isfinite(LER3Sig)
LER3Filt = [d[m] for d, m in zip(LER3Sig.T, mask.T)]
labels = [r'$150 \degree C$',r'$200 \degree C$',r'$210 \degree C$',r'$220 \degree C$',r'$230 \degree C$',r'$240 \degree C$']
pos = [1,3,4,5,6,7]
BER = BoxAx[0].boxplot(LER3Filt,patch_artist = True,positions = pos,labels=labels\
           ,boxprops = dict(facecolor = LERColor)\
           ,medianprops = dict(color ='black')\
           ,showfliers=False)
BoxAx[0].set_ylim([0,14])

BoxAx[1].set_ylabel(r'$3\sigma_p (nm)$')
mask = np.isfinite(LPR3Sig)
LPR3Filt = [d[m] for d, m in zip(LPR3Sig.T, mask.T)]
BPR = BoxAx[1].boxplot(LPR3Filt,patch_artist = True,positions = pos,labels=labels
           ,boxprops = dict(facecolor = LPRColor)\
           ,medianprops = dict(color ='black')\
           ,showfliers = False)
BoxAx[1].set_ylim([0,14])

BoxAx[2].set_ylabel(r'$3\sigma_w (nm)$')
mask = np.isfinite(LWR3Sig)
LWR3Filt = [d[m] for d, m in zip(LWR3Sig.T, mask.T)]
BWR = BoxAx[2].boxplot(LWR3Filt,patch_artist = True,positions = pos,labels=labels\
           ,boxprops = dict(facecolor = LWRColor)\
           ,medianprops = dict(color ='black')\
           ,showfliers=False)
BoxAx[2].set_ylim([0,14])

  

#%
BoxAx[3].set_ylabel(r'$c$')
mask = np.isfinite(CK3Sig)
CK3Filt = [d[m] for d, m in zip(CK3Sig.T, mask.T)]
BCK = BoxAx[3].boxplot(CK3Filt,patch_artist = True,positions = pos,labels=labels
           ,boxprops = dict(facecolor = CColor)\
           ,medianprops = dict(color ='black')\
           ,showfliers = False)
BoxAx[3].set_ylim([0,1])


BoxF.tight_layout()
BoxF.savefig("SigmasRecolor.png", dpi=600)


#%%
Temp = 5 # what temperature index? 0= 150, then ,200,210,220,230,240
TempNames = [150, 200, 210, 220, 230, 240]
#%
LER3SigTemp = LER3Sig[:,Temp]
LPR3SigTemp = LPR3Sig[:,Temp]
LWR3SigTemp = LWR3Sig[:,Temp]
CK3SigTemp = CK3Sig[:,Temp]

TempList = [LER3SigTemp, LPR3SigTemp, LWR3SigTemp, CK3SigTemp]

SDom = int(np.ceil(LER3SigTemp.size/7)*2)

LER3SigDom = np.zeros((SDom,4))*np.nan
LPR3SigDom = np.zeros((SDom,4))*np.nan
LWR3SigDom = np.zeros((SDom,4))*np.nan
CK3SigDom = np.zeros((SDom,4))*np.nan

DomList = [LER3SigDom, LPR3SigDom, LWR3SigDom, CK3SigDom] # remember python is pointers!


#%
for Rough in zip(DomList,TempList):
    Rough[0][:int(SDom/2),0] = Rough[1][0::7]
    Rough[0][int(SDom/2):-1,0] = Rough[1][6::7]
    Rough[0][:int(SDom/2),1] = Rough[1][1::7]
    Rough[0][int(SDom/2):-1,1] = Rough[1][5::7]
    Rough[0][:int(SDom/2)-1,2] = Rough[1][2::7]
    Rough[0][int(SDom/2):-1,2] = Rough[1][4::7]
    Rough[0][int(SDom/2):-1,3] = Rough[1][3::7]

#% Plot for domains
#%
BoxFDom, BoxAxDom = plt.subplots(nrows = 4, sharex=True,figsize=(6,12))

labels = [r'$1, 7$',r'$2, 6$',r'$3, 5$',r'$4$']
pos = [1,2,3,4]
#BoxFDom.suptitle('Sigmas for Temperature %i'%(TempNames[Temp]))
BoxAxDom[0].set_ylabel(r'$3\sigma_e (nm)$')
mask = np.isfinite(LER3SigDom)
LER3Filt = [d[m] for d, m in zip(LER3SigDom.T, mask.T)]

BoxAxDom[0].boxplot(LER3Filt,patch_artist = True,positions = pos,labels=labels
           ,boxprops = dict(facecolor = LERColor)
           ,medianprops = dict(color ='black')
           ,showfliers=False)


  
BoxAxDom[1].set_ylabel(r'$3\sigma_p (nm)$')
mask = np.isfinite(LPR3SigDom)
LPR3Filt = [d[m] for d, m in zip(LPR3SigDom.T, mask.T)]
BoxAxDom[1].boxplot(LPR3Filt,patch_artist = True,positions = pos,labels=labels
           ,boxprops = dict(facecolor = LPRColor)
           ,medianprops = dict(color ='black')
           ,showfliers = False)


BoxAxDom[2].set_ylabel(r'$3\sigma_w (nm)$')
mask = np.isfinite(LWR3SigDom)
LWR3Filt = [d[m] for d, m in zip(LWR3SigDom.T, mask.T)]
BoxAxDom[2].boxplot(LWR3Filt,patch_artist = True,positions = pos,labels=labels
           ,boxprops = dict(facecolor = LWRColor)
           ,medianprops = dict(color ='black')
           ,showfliers=False)

#%
BoxAxDom[3].set_ylabel(r'$c$')
mask = np.isfinite(CK3SigDom)
CK3Filt = [d[m] for d, m in zip(CK3SigDom.T, mask.T)]
BoxAxDom[3].boxplot(CK3Filt,patch_artist = True,positions = pos,labels=labels
           ,boxprops = dict(facecolor = CColor)
           ,medianprops = dict(color ='black')
           ,showfliers = False)

BoxAxDom[3].set_ylim([0,1])

BoxFDom.tight_layout()
BoxFDom.savefig("SigmasRecolorT%i.png" %(TempNames[Temp]), dpi=600)

#%%
TableTemp = pd.DataFrame(index=TempNames,columns=['LER','LER Std','LPR','LPR Std','LWR','LWR Std','cK','cK Std','x'])
TableTemp['LER']=np.nanmean(LER3Sig,axis=0)
TableTemp['LER Std']=np.nanstd(LER3Sig,axis=0)
TableTemp['LWR']=np.nanmean(LWR3Sig,axis=0)
TableTemp['LWR Std']=np.nanstd(LWR3Sig,axis=0)
TableTemp['LPR']=np.nanmean(LPR3Sig,axis=0)
TableTemp['LPR Std']=np.nanstd(LPR3Sig,axis=0)
TableTemp['cK']=np.nanmean(CK3Sig,axis=0)
TableTemp['cK Std']=np.nanstd(CK3Sig,axis=0)
TableTemp['x'] = 0.0284+3.9/np.array(TempNames)
TableTemp.to_csv('CrossTempValues.csv')

#%%
TableDom = pd.DataFrame(index=['e1,e7','e2,e6','e3,e5','e4'],columns=['LER','LER Std','LPR','LPR Std','LWR','LWR Std','cK','cK Std'])
TableDom['LER']=np.nanmean(LER3SigDom,axis=0)
TableDom['LER Std']=np.nanstd(LER3SigDom,axis=0)
TableDom['LWR']=np.nanmean(LWR3SigDom,axis=0)
TableDom['LWR Std']=np.nanstd(LWR3SigDom,axis=0)
TableDom['LPR']=np.nanmean(LPR3SigDom,axis=0)
TableDom['LPR Std']=np.nanstd(LPR3SigDom,axis=0)
TableDom['cK']=np.nanmean(CK3SigDom,axis=0)
TableDom['cK Std']=np.nanstd(CK3SigDom,axis=0)
TableDom.to_csv('CrossDomValues.csv')